МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра програмної інженерії
ЗВІТ
З лабораторної роботи №2
З дисципліни «Аналіз та рефакторинг коду»
на тему: «Розробка бази даних для
серверної частини програмної системи та
прикладного програмного інтерфейсу
(АРІ)»
Виконала:
ст. гр. ПЗПІ-22-7
Сергєєнкова Марія Сергіївна
Перевірив:
доц.каф. ПІ
Сокорчук І.П.
Харків 2024
1. Вступ
1.1 Тема роботи
Темою даної лабораторної роботи є розробка back-end, тобто серверної
частини проекту за темою: «Програмна система для догляду за літніми людьми».
1.2 Мета роботи
Метою роботи є розробка бази даних для серверної частини програмної
системи та прикладного програмного інтерфейсу (API), отримання навичок з
проєктування серверної частини програмної системи з використанням UML
діаграми прецедентів, ER-діаграми, діаграми структури БД.
2. Розробка діаграм
2.1 Розробка UML діаграми прецедентів для серверної частини системи
Діаграма UML прецедентів відображає функціональність системи AgeWell,
зосереджуючись на взаємодії різних акторів із системою та їх завданнях. У
системі залучені кілька ключових користувачів, серед яких медичний працівник,
родич літньої людини, адміністратор системи та смарт-пристрій показників
здоров’я.
Медичний працівник отримує доступ до широкого спектра функцій,
включаючи створення нового профілю для літньої людини, оновлення інформації
про призначені медикаменти та діагнози, а також управління інформацією про
діагнози та медикаменти – створення, оновлення, видалення та перегляд. Крім
цього, медичний працівник може переглядати актуальні показники здоров’я
літньої людини за допомогою зібраних даних від інтегрованих пристроїв, а також
генерувати звіти щодо стану здоров’я пацієнта за певний проміжок часу.
Родич літньої людини взаємодіє із системою, отримуючи повідомлення про
критичні або нестандартні показники здоров’я пацієнта, а також має можливість
переглядати загальну інформацію профілю літньої людини. Це забезпечує
постійний моніторинг стану здоров’я близької людини, що є ключовим у
забезпеченні її безпеки.
Адміністратор системи виконує адміністративні завдання, зокрема
створення нових облікових записів для медичних працівників і адміністраторів, а
також доступ до базової статистичної звітності, що дозволяє аналізувати загальну
ефективність роботи системи.
Смарт-пристрій показників здоров’я інтегрується із системою для
автоматичного збору даних про стан здоров’я літньої людини. Ці дані
використовуються для оновлення відбитків показників здоров’я, які є основою
для моніторингу та аналізу.
Усі користувачі системи проходять авторизацію для отримання доступу до
своєї функціональності.
Діаграма демонструє, як всі користувачі системи AgeWell працюють разом
для забезпечення ефективного моніторингу та догляду за літніми людьми,
пропонуючи сучасний підхід до збереження здоров’я та реагування на
надзвичайні ситуації.
Розроблена UML діаграма за нашими акторами та прецедентами наведена
на рис. 2.1.
Рисунок 2.1 – UML діаграма прецедентів проєкту «Програмна система
для догляду за літніми людьми»
2.2 Розробка ER діаграми даних
Перед початком розробки бази даних попередньо було створено ERдіаграму для спрощення моделювання структури даних (див. рис.2.2).
Вона складається з 10 таблиць: User (користувач), Access_Level (Рівень
доступу), Patient (Пацієнт), Diagnosis (Діагноз), Medicine (Ліки), смарт-пристрій
(Device), Notification (Сповіщення), Indicators_stamp (Вимірювання показників) та
з’єднувальні таблиці User_Patient, Patient_Medicine.
Рисунок 2.2 – ER діаграма даних проєкту «Програмна система для
догляду за літніми людьми»
На ER-діаграмі показано взаємозв’язок між наступними сутностями:
1. Access_Level (Рівень доступу)
Атрибути:
- access_level_id (ID рівня доступу)
- name (Назва рівня доступу)
Призначення: Використовується для класифікації користувачів за
ролями, такими як адміністратор, лікар/медсестра, родичі пацієнта та
надавання їм відповідного рівня доступу.
Зв’язки:
- з User (один до багатьох)
2. User (Користувач)
Атрибути:
- user_id (ID користувача)
- name (Ім'я)
- surname (Прізвище)
- access_level_id (ID рівня доступу)
- email (Електронна пошта)
- password_hash (Хеш пароля)
Зв’язки:
- з Access_Level (багато до одного)
- з Patient (багато до багатьох)
3. User_Patient (Користувач-Пацієнт)
Атрибути:
- id (ID запису)
- user_id (ID користувача)
- patient_id (ID пацієнта)
Призначення: З’єднувальна таблиця для відображення взаємозв’язку
між користувачами та пацієнтами.
4. Patient (Пацієнт)
Атрибути:
- patient_id (ID пацієнта)
- name (Ім'я)
- surname (Прізвище)
- birthday (Дата народження)
- diagnosis_id (ID діагнозу)
Зв’язки:
- з Diagnosis (багато до одного)
- з Medicine (багато до багатьох)
- з Device (багато до багатьох)
- з User (багато до багатьох)
5. Diagnosis (Діагноз)
Атрибути:
- diagnosis_id (ID діагнозу)
- name (Назва діагнозу)
- description (Опис діагнозу)
Зв’язки:
- з Patient (один до багатьох)
6. Patient_Medicine (Пацієнт-Ліки)
Атрибути:
- id (ID запису)
- patient_id (ID пацієнта)
- medicine_id (ID ліків)
- date (Дата)
- schedule (Розклад прийому ліків)
Призначення: З’єднувальна таблиця для відображення взаємозв’язку
між пацієнтами та назначеними їм ліками.
7. Medicine (Ліки)
Атрибути:
- medicine_id (ID ліків)
- name (Назва ліків)
- description (Опис ліків)
Зв’язки:
- з Patient (багато до багатьох)
8. Indicators_stamp (Вимірювання показників)
Атрибути:
- id (ID запису)
- timestamp (Час вимірювання)
- device_id (ID пристрою)
- patient_id (ID пацієнта)
- pulse (Пульс)
- systolic_blood_pressure (Систолічний тиск)
- diastolic_blood_pressure (Діастолічний тиск)
- temperature (Температура тіла)
9. Notification (Сповіщення)
Атрибути:
- id (ID сповіщення)
- timestamp (Час сповіщення)
- indicators_stamp_id (ID вимірювання)
- message (Повідомлення)
Зв’язки:
- з Indicators_stamp (багато до одного)
10.Device (Пристрій)
Атрибути:
- id (ID пристрою)
- password_hash (Хеш пароля)
Зв’язки:
- з Patient (багато до багатьох)
3. Розробка бази даних
3.1 Розроблення бази даних програмної системи
Програмна система використовує СКБД PostgreSQL. Для підключення до
бази даних під час запуску серверу необхідно прописати хост та порт бази даних,
назву бази даних а також ім’я користувача та пароль до неї.
Після створення бази даних, була отримана діаграма структури бази даних
(див. рис. 3.1).
Рисунок 3.1 – Діаграма структури бази даних проєкту «Програмна система
для догляду за літніми людьми»
Для розробки функцій роботи з базою даних використовувались такі
технології:
- PostgreSQL як надійна СКБД для зберігання даних користувачів, пацієнтів та
медичних показників;
- sqlx — бібліотека для спрощення взаємодії з базою даних через SQL-запити,
яка підтримує параметризацію та забезпечує зручність роботи з даними;
Код прикладу взаємодії серверної частини із базою даних наведено у додатку А.
4. Розробка серверної частини
4.1 Розробка АРІ для взаємодії серверної частини з клієнтами
Для розробки серверної взаємодії з клієнтами було використано REST —
архітектурний стиль створення API, який базується на протоколі HTTP для
обміну даними. REST забезпечує уніфікований інтерфейс роботи з ресурсами,
ідентифікованими унікальними URL-адресами. У процесі розробки API було
застосовано принципи REST, які включають використання стандартних HTTPметодів: GET для отримання даних, POST для створення нових ресурсів, PUT для
оновлення існуючих, і DELETE для видалення ресурсів.
Кожен запит до API повертає відповідний HTTP-статус, який інформує про
успішність виконання операції чи виникнення помилки, наприклад, 200 OK, 401
Unauthorized або 500 Internal Server Error (див. рис. 4.1 – 4.2).
Рисунок 4.1 – Приклад отримання статусу 200
Рисунок 4.2 – Приклад отримання статусу 401
Розроблений API побудований на основі ресурсів, кожен з яких має
унікальні ендпоінти для виконання CRUD-операцій. Наприклад, ендпоінт GET
/api/diagnoses забезпечує отримання списку всіх діагнозів (див. рис. 4.3), а POST
/api/patient дозволяє додати нового пацієнта до системи (див. рис. 4.4).
Рисунок 4.3 – Приклад GET запиту
Рисунок 4.4 – Приклад POST запиту
Також було реалізовано механізм обробки помилок, що виникають при
введенні користувачами некоректних даних. Наприклад, спроба додати пацієнта
з неіснуючим діагнозом призведе до повернення статусу 500 з відповідним
повідомленням (див. рис. 4.5).
Рисунок 4.5 – Приклад обробки помилки
Для захисту даних в API впроваджено механізми аутентифікації та
авторизації на основі JWT (JSON Web Tokens). JWT — це стандарт для безпечної
передачі інформації між клієнтом і сервером у компактному вигляді. Усі дані в
токені підписуються секретним ключем, що забезпечує перевірку їхньої
цілісності та автентичності.
Процес аутентифікації з JWT складається з кількох етапів. Спочатку
користувач надсилає свої облікові дані (в нашій системі: пошту та пароль) до
ендпоінта аутентифікації. Якщо дані валідні, сервер створює JWT, який містить
інформацію про користувача та його права доступу, і повертає цей токен клієнту
(див. рис. 4.6).
Рисунок 4.6 – Приклад входу у систему і видачі токена доступу
Згодом, при кожному наступному зверненні до захищеного ресурсу,
користувач системи має додавати цей токен до заголовка HTTP-запиту в полі
Authorization у форматі Bearer. Сервер перевіряє достовірність токена на основі
його значення.
4.2 Специфікація розробленого API
Для реалізації серверної частини програми було розроблено наступні
маршрути.
Авторизація:
 POST /api/auth/sign-up — реєстрація нового користувача;
 POST /api/auth/sign-in — вхід до системи.
Діагнози:
 POST /api/diagnosis — створення діагнозу;
 GET /api/diagnosis — отримання всіх діагнозів;
 GET /api/diagnosis/<int:diagnosis_id> — отримання конкретного
діагнозу;
 PUT /api/diagnosis/<int:diagnosis_id> — оновлення діагнозу;
 DELETE /api/diagnosis/<int:diagnosis_id> — видалення діагнозу.
Ліки:
 POST /api/medicine — створення ліків;
 GET /api/medicine — отримання всіх ліків;
 GET /api/medicine/<int:medicine_id> — отримання конкретних ліків;
 PUT /api/medicine/<int:medicine_id> — оновлення ліків;
 DELETE /api/medicine/<int:medicine_id> — видалення ліків.
Пацієнти:
 POST /api/patient — створення пацієнта;
 GET /api/patient — отримання всіх пацієнтів;
 GET /api/patient/<int:patient_id> — отримання конкретного пацієнта;
 PUT /api/patient/<int:patient_id> — оновлення пацієнта;
 DELETE /api/patient/<int:patient_id> — видалення пацієнта.
Для тестування розробленого API було використано Postman і було
підготовано відповідні HTTP-запити до серверу (див. рис. 4.7)
Рис. 4.7 – Тестування розробленого API
Програмна реалізація маршрутизатора згідно із специфікацією API
наведено в додатку Б.
Код прикладу взаємодії клієнтів із серверною частиною (обробники httpзапитів) наведено у додатку В.
5. Висновки
Під час виконання лабораторної роботи була розроблена UML-діаграма
прецедентів для серверної частини та ER-діаграма даних. На основі цих діаграм була
створена база даних для програмної системи. Далі була розроблена діаграма
структури бази даних. Потім було створено функції для взаємодії з цією базою даних
та АРІ для комунікації серверної частини з клієнтами. Наприкінці була реалізована
програмна частина розробленого АРІ.

Посилання на файл з кодом в GitHub репозиторії: https://github.com/NureSerhieienkovaMariia/arkpz-pzpi-22-7-serhieienkova-mariia/tree/main/Task2/arkpz-pzpi-22-7-serhieienkova-mariia-task2
Посилання на YouTube відео з презентацією: https://youtu.be/3S3f3wpSQO4?feature=shared
