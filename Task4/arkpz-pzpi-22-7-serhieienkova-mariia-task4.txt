МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра програмної інженерії
ЗВІТ
З лабораторної роботи №4
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА IoT КЛІЄНТА»
Виконала:
ст. гр. ПЗПІ-22-7
Сергєєнкова Марія Сергіївна
Перевірив:
доц.каф. ПІ
Сокорчук І.П.
Харків 2024
1.1 Мета роботи
Розробити клієнт IoT для «Програмна система для догляду за літніми
людьми», який здійснює збір, аналіз і передачу даних на сервер відповідно до
принципів Інтернету речей. Реалізувати бізнес-логіку, функціонал
налаштування пристрою та забезпечити інтеграцію з іншими компонентами
системи.
1.2 Опис бізнес логіки IoT клієнта
Діаграма прецедентів (див. рис. 1) демонструє процес збору та передачі
даних фізіологічних параметрів користувача за допомогою IoT-клієнта, який
взаємодіє з різними сенсорами (датчиками) та MQTT-брокером для
моніторингу стану здоров’я.
IoT-клієнт ініціює запити до підключених сенсорів, таких як датчик
тиску, датчик температури та датчик частоти пульсу:
- Датчик тиску відповідає на запит IoT-клієнта, передаючи дані про
систолічний і діастолічний тиск.
- Датчик температури передає дані про температуру тіла
користувача.
- Датчик частоти пульсу передає показники пульсу.
Після отримання даних від сенсорів IoT-клієнт передає всі зібрані
показники до MQTT-брокера. MQTT-брокер, своєю чергою, обробляє
отриману інформацію та підтверджує її успішне отримання.
Система забезпечує надійну передачу даних і дозволяє їх подальшу
обробку, що важливо для моніторингу та аналізу стану здоров’я.
Рисунок 1 – UML Діаграма прецедентів IoT клієнта
1.3 Процеси та взаємодії в системі IoT клієнта
Діаграма діяльності (див. рис. 2) демонструє роботу IoT-клієнта,
починаючи з ініціалізації системи та спроби підключення до Wi-Fi мережі. У разі
успішного підключення клієнт переходить до ініціалізації сенсорів, які збирають
дані про температуру, пульс і артеріальний тиск. Після цього система обробляє та
форматує отримані дані, виводить їх у консоль для перевірки та відправляє через
MQTT-брокер. Успішна передача даних завершується відповідним
повідомленням, а у випадку помилки система інформує про збій, дозволяючи
своєчасно реагувати на проблеми.
Рисунок 2 – UML -діаграма діяльності IoT клієнта
1.4 Розробка функцій управління та інтерфейсу користувача IoT
Розроблене програмне забезпечення реалізує бізнес-логіку та функції
налаштування IoT-пристрою на базі сучасних технологій. Було створено IoTсистему моніторингу здоров'я на базі мікроконтролера ESP32, яка включає кілька
ключових інженерних рішень для забезпечення ефективності та стабільної роботи
пристрою:
- Розроблено програмний код для взаємодії з сенсором температури
DS18B20 та генератором пульсу. Пристрій вимірює ці параметри та передає
їх для подальшої обробки.
- Використано Wi-Fi модуль ESP32 для з'єднання з мережею та
передавання даних на MQTT-брокер для віддаленого моніторингу.
- Створено механізм збору та обробки даних з DS18B20 (температура) та
генератора пульсу, що дозволяє здійснювати точне вимірювання та
передачу даних.
- Забезпечено інтеграцію IoT-пристрою з MQTT сервером, що дозволяє
передавати дані у форматі JSON на віддалений клієнт для моніторингу.
- Здійснено тестування пристрою через серійний монітор для перевірки
коректності з'єднання з Wi-Fi мережею та MQTT сервером.
Ця система забезпечує надійний моніторинг життєвих показників пацієнта
та їх передачу для подальшого аналізу, що сприяє покращенню якості вчасного
реагування у разі критичного стану пацієнта.
 1.5 Текстовий опис інженерних рішень
Програмний код IoT-пристрою реалізовано в Arduino IDE з використанням
бібліотек WiFi.h для підключення до мережі, PubSubClient.h для передачі даних
через MQTT, а також DallasTemperature.h і OneWire.h для роботи з датчиком
температури DS18B20. Система спочатку підключається до Wi-Fi, після чого
ініціалізує сенсори та зчитує дані. Зібрані дані передаються на MQTT-брокер у
форматі JSON для віддаленого моніторингу. Схема IoT пристрою наведена на рис. 3.
Рисунок 3 – Схема IoT пристрою
2.1 Фрагменти програмного коду
2.1.1 Бізнес-логіка IoT-клієнта
Фрагмент коду зчитування даних сенсорів наведено у додатку А.
2.1.2 Налаштування IoT-клієнта
Фрагмент коду підключення до Wi-Fi:
1. // Wi-Fi credentials
2. const char* ssid = "Wokwi-GUEST"; // etwork SSID
3. const char* password = ""; // etwork password
4. void connectToWiFi() {
5. Serial.print("Connecting to WiFi");
6. WiFi.begin(ssid, password);
7. while (WiFi.status() != WL_CONNECTED) {
8. Serial.print(".");
9. }Serial.println("Connected to WiFi");}
10. void setup() {
11. Serial.begin(115200);
12. // Connect to Wi-Fi
13. WiFi.begin(ssid, password);
14. while (WiFi.status() != WL_CO ECTED) {
15. delay(1000);
16. Serial.println("Connecting to WiFi...");}
12. Serial.println("WiFi connected");
13. Serial.println("Ifl Address: " +
WiFi.localIfl().toString());}
3 Висновки
У ході виконання лабораторної роботи був успішно розроблений IoT-клієнт
для моніторингу стану здоров'я, який ефективно збирає, обробляє та передає дані з
різних сенсорів, таких як температура, пульс та тиск. Клієнт налаштований для
інтеграції через MQTT, що дозволяє віддалено моніторити здоров'я в рамках
більших IoT-систем. Це підкреслює практичну цінність розробленої системи для
медичних цілей, відкриваючи перспективи для подальших удосконалень та
впроваджень у реальному світі.
Посилання на YouTube відео з презентацією: https://youtu.be/nt4RBVN_t6I?feature=shared
Посилання на файл з кодом в GitHub репозиторії: https://github.com/NureSerhieienkovaMariia/arkpz-pzpi-22-7-serhieienkova-mariia/tree/main/Task4/arkpz-pzpi-22-7-serhieienkova-mariia-task4

ДОДАТОК А
Фрагмент коду зчитування даних сенсорів
1. // Налаштування датчика температури
2. #define ONE_WIRE_BUS 23 // Пін для DS18B20
3. OneWire oneWire(ONE_WIRE_BUS);
4. DallasTemperature sensors(&oneWire);
5. // Налаштування генератора пульсу
6. #define PULSE_PIN 2 // Пін генератора пульсу (GPIO2)
7. #define SAMPLING_INTERVAL 1000 // Інтервал для вибірки пульсу (в
мілісекундах)
8. volatile uint16_t pulse = 0;
9. uint16_t count = 0;
10. int heartRate = 0;
11. unsigned long lastPulseTime = 0;
12. void setup() {
13. // Ініціалізація серійного порту
14. Serial.begin(115200);
15. // Ініціалізація датчика температури
16. sensors.begin();
17. // Ініціалізація генератора пульсу
18. pinMode(PULSE_PIN, INPUT);
19. attachInterrupt(digitalPinToInterrupt(PULSE_PIN), HeartRateInterrupt,
RISING); // Налаштування переривання на пін PULSE_PIN}
void loop() {
20. if (!client.connected()) {
21. connectToMQTT();
22. }
23. client.loop();
24. // Зчитування температури
25. sensors.requestTemperatures();
26. float temperature = sensors.getTempCByIndex(0);
27. // Code to process heart rate and publish MQTT data
28. }
