МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра програмної інженерії
ЗВІТ
З лабораторної роботи №5
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ
СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ
РОБОТИ»
Виконала:
ст. гр. ПЗПІ-22-7
Сергєєнкова Марія Сергіївна
Перевірив:
доц.каф. ПІ
Сокорчук І.П.
Харків 2024
1. Мета роботи
Розгорнути реалізовану програмну систему, перевірити та налаштувати
роботу розгорнутої програмної системи для догляду за літніми людьми.
2. Хід роботи:
2.1 Опис розгорнутої програмної системи
Серверна частина:
- Мова програмування: Серверна частина програми написана на мові
програмування Golang.
- Фреймворк: Використовується Gin, що забезпечує ефективну розробку веб
додатків і REST API.
- База даних: СКБД PostgreSQL, що використовується для зберігання даних.
Для роботи з базою даних використовується бібліотека sqlx, що спрощує
взаємодію із базою даних.
- Маршрутизація: Розроблено та налаштовано обробники HTTP запитів.
Реалізовані методи для роботи з основними ресурсами системи: GET, POST,
PUT, DELETE.
Функціональність:
Система збирає та аналізує дані про стан здоров’я пацієнтів, зокрема інформацію
про пульс, температуру, та артеріальний тиск. Включена можливість надсилання
лікарям та рідним пацієнта повідомлень про нестандартні, або ж критичні
показники.
Інтеграція з IoT:
Система взаємодіє з IoT-пристроями через MQTT брокер, що дозволяє
автоматично отримувати дані про стан здоров’я користувача.
2.2 Опис розгортання
Серверна частина:
1. Інсталяція залежностей: Виконано встановлення всіх необхідних
залежностей через go get.
2. Налаштування середовища: Встановлено змінні середовища що
зчитуються під час запуску серверу.
3. Запуск сервера: Сервер запущено командою go run. Для перевірки
працездатності використовувалися запити до кінцевих точок API за
допомогою Postman.
4. Перевірка функціональності:
- Запити до API обробляються коректно.
- Дані успішно зберігаються в PostgreSQL.
- Система генерує та надсилає нагадування користувачам.
Інтеграція IoT:
1. Підключення ESP32 до Wi-Fi та налаштування передачі даних на
сервер.
2. Передача зібраних даних через HTTP POST запити до API системи.
3. Сервер успішно обробляє отримані дані й зберігає їх у базу даних для
подальшого аналізу.
Використані інструменти та технології:
- Golang: Серверна частина.
- PostgreSQL: Зберігання даних.
- Postman: Тестування API.
- MQTT: З’єднання IOT та беку
- Goland: Розробка та налагодження коду.
- GitHub: Керування версіями коду.
3 Висновки
Розроблена програмна система успішно протестована та демонструє коректну
роботу всіх компонентів. Система забезпечує зчитування даних із сенсорів
(температура, пульс, артеріальний тиск), обробку цих даних та їхнє збереження в
базі даних PostgreSQL для подальшого аналізу та моніторингу. Завдяки
використанню мови програмування Go реалізована висока продуктивність та
стабільність роботи. Дані передаються у форматі JSON, що забезпечує гнучкість при
обробці інформації. Програма продемонструвала надійну роботу в тестовому
середовищі, що дозволяє використовувати її для моніторингу здоров’я в різних
умовах. У майбутньому можливе розширення функціоналу для інтеграції з
додатковими сервісами чи додатками, що покращить масштабованість та зручність
використання системи.
Посилання на YouTube відео з презентацією: https://youtu.be/NfzTSkbEZaY?feature=shared
Посилання на файл з кодом в GitHub репозиторії: https://github.com/NureSerhieienkovaMariia/arkpz-pzpi-22-7-serhieienkova-mariia/tree/main/Task5/arkpz-pzpi-22-7-serhieienkova-mariia-task5
