МІНЕСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра «Програмна інженерія»




ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»





Виконала:
Ст. гр. ПЗПІ-22-7
Сергєєнкова Марія Сергіївна	Перевірив:
ст. викладач кафедри ПІ Сокорчук Ігор Петрович




Харків 2024

1 МЕТА 
Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду. 
2 ЗАВДАННЯ
Обрати мову програмування для прикладів коду. Створити презентацію на тему «Правила оформлення програмного коду». 

3 ХІД РОБОТИ
Було обрано мову програмування Swift. У презентації (Додаток А) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду до і після застосування цих рекомендацій. 

ВИСНОВКИ
Набуто навичок рефакторингу програмного коду, детально розглянуто основні правила оформлення коду. 
Посилання на відео-презентацію 
Посилання на GitHub репозиторій с кодом

ДОДАТОК А
Презентація на тему «Правила оформлення програмного коду». 

Основні рекомандації
написання коду для мови
программування Swift
Виконувала: Сергєєнкова Марія
Ст. гр. ПЗПІ-22-7
01.12.2024
Вступ: Важливість
правил оформлення
коду
Дотримання правил оформлення коду дуже важливе для якісної
розробки. Це допомагає зробити код зрозумілим для всієї
команди, а також полегшує його тестування і доопрацювання.
Зручність у
роботі
Код стає легше читати та
розуміти.
Ефективна
співпраця
Спрощується робота в
команді.
Менше помилок
Стандартизований код
сприяє уникненню багів.
Простота
підтримки
Код легко оновлювати і
розширювати.
2
Організація проєкту та файлів
1
Одна задача — один файл
Кожен файл повинен виконувати чітко визначену функцію.
Наприклад, файл User.swift містить модель даних користувача, а UserInterface.swift — логіку інтерфейсу.
2
Імена файлів відповідають їх вмісту
Використання назви на зразок User.swift для моделі користувача, а не абстрактні варіанти на кшталт
File1.swift чи DataFile.swift.
3
Структура та порядок у файлі
Дотримання логічної послідовності:
Початковий коментар із коротким описом призначення файлу
Імпорти бібліотек: import Foundation
Визначення класів, структур або функцій у чіткому логічному порядку, згрупованих за їх ролями в
проєкті.
3
Логічний поділ і коментарі
Логічний поділ на модулі та класи
Використання класів та структур для поділу
відповідальностей.
Об'єднування функцій з подібною логікою в
одному модулі.
Коментарі для структурування
Використання коментарів для поділу секцій коду
та важливих моментів коду, але уникання
надмірностей
Приклад поділу секцій коду
Розділи MARK структурують код на логічні секції. Це
полегшує орієнтацію у файлі, особливо в великих
проєктах.
Приклад зрозумілих коментарів
Коректні коментарі допогають команді зрозуміти,
як організован проєкт, і швидко знайти потрібний
код.
4
Відступи та довжина рядків
Відступи
Використовувати 4 пробіли для вкладеності.
Заборонено використовувати табуляцію.
Довжина рядків
Максимальна довжина рядка — 100 символів.
Переносити складні вирази після коми або перед
оператором.
Новий рядок повинен вирівнюватися із
попереднім блоком.
Невдалий код: Гарний код:
5
Стандарти для дужок
Фігурні дужки
Використовуйте стиль K&R:
відкрита дужка { розташована в
тому ж рядку, що й вираз.
Круглі дужки
Завжди використовуйте круглі
дужки для уточнення порядку
дій. Це підвищує читабельність і
запобігає помилкам у складних
виразах.
Розташування дужок
у Swift
Умовні оператори та цикли
мають специфічний вигляд.
Закриття дужок завжди
вирівнюється з початком блоку
коду.
Фрагмент з загального коду:
Умовний оператор в checkActiveStatus(for:) використовує фігурні дужки в стилі K&R, де відкрита дужка стоїть на
тому ж рядку, що й умова (if).
Функція removeUser(by:) демонструє використання круглих дужок для чіткішого уточнення параметрів та
функцій, що покращує читабельність.нка
Такий підхід забезпечує якісне форматування та полегшує читання і підтримку коду.
6
Розташування оголошень
Невдалий код
Оголошення кількох змінних в одному рядку
погіршує читабельність коду.
Гарний код
Одне оголошення на рядок покращує
читабельність та розуміння коду.
Розташування оголошень відіграє важливу роль у написанні чистого та зрозумілого коду Swift. Ось кілька
ключових рекомендацій:
1 Одне оголошення на рядок
Рекомендується оголошувати лише одну змінну,
константу чи функцію в рядку для кращої
читабельності.
2 Групування змінних одного типу
Змінні одного типу варто групувати разом, що
покращує організацію та структуру коду.
Дотримання цих правил допоможе зробити ваш код Swift більш зрозумілим та легким для підтримки.
7
Іменування класів та функцій
Стиль CamelCase
У Swift використовується стиль
CamelCase для класів, функцій
та змінних.
Іменування класів і
структур
Для класів і структур імена
мають бути іменниками, що
чітко описують їх
призначення.
Іменування функцій
Функції називаються
дієсловами, що вказують на
дію, яку вони виконують.
class UserProfile {
 var name: String
 var age: Int

 func updateAge(newAge: Int) {
 age = newAge
 }
}
Клас UserProfile описує профіль користувача з властивостями name та age. Ім’я класу зрозуміле і відразу
вказує на те, що клас пов'язаний з профілем користувача.
Метод updateAge(newAge:) використовує дієслово update, що чітко вказує на дію, яку цей метод виконує
(оновлює вік користувача).
8
Іменування змінних та констант
Змінні в Swift
Використовують CamelCase для імен
Ім'я повинно чітко вказувати на призначення
змінної
Константи в Swift
Прийнято писати всіма великими літерами
Розділення слів підкресленням допомагає
легко ідентифікувати незмінні значення
Фрагмент з загального коду з правильним іменуванням змінних та констант:
MAX_LOGIN_ATTEMPTS — це константа, яка визначає максимальну кількість спроб авторизації. Назва
написана у верхньому регістрі з використанням підкреслення для розділення слів, що є стандартом для
констант.
1.
BASE_DISCOUNT_RATE — це константа, що визначає базову ставку знижки. Ім'я чітко вказує на її призначення, а
стиль назви відповідає правилам для констант.
2.
currentUserBalance — це змінна, яка зберігає поточний баланс користувача. Назва написана у стилі CamelCase,
починається з малої літери, що відповідає стандарту для змінних.
3.
currentLoginAttempts — це змінна для відстеження кількості спроб авторизації. Ім’я пояснює, що саме
відображає змінна, роблячи код зрозумілим.
4.
9
Коментарі
Однорядкові коментарі
Використання (//) для коротких
пояснень.
Многострічкові
коментарі
Використання (/\* \*/) для пояснень
великих блоків коду.
Коли використовувати
Для пояснення логіки: чому і як
виконується операція
Для складних моментів:
додавайте коментарі до
важливих або неочевидних
частин коду
Практики уникнення надмірних коментарів:
Уникати коментування очевидного коду.
Уникати коментарів, що повторюють те, що вже зрозуміло з самого коду.
Документуючі коментарі у Swift використовуються для того, щоб додати до коду чітке пояснення функцій, класів
або методів. Вони дозволяють автоматично генерувати документацію, яку можна легко переглядати у Xcode. Це
значно спрощує розуміння коду іншими розробниками, особливо у великих проєктах. Документуючі коментарі
розпочинаються з трьох косих рисок (///).
10
Основи TDD та організація коду з
урахуванням тестів
Test-Driven Development (TDD) — це методологія програмування, яка базується на написанні тестів до того, як
реалізується сама функціональність.
Основні етапи TDD:
Написання тесту
Спочатку пишеться тест, який
перевіряє функціональність,
що ще не реалізована.
Реалізація коду
Потім реалізується
мінімальний код для того, щоб
тест пройшов.
Рефакторинг
Після проходження тесту, код
рефакториться для
покращення якості,
зберігаючи всі тести.
Переваги TDD:
Полегшення
рефакторингу
Оскільки всі тести вже існують,
рефакторинг не порушить
існуючу логіку програми.
Знижує кількість
багів
Тести допомагають виявляти
помилки на ранніх етапах.
Збільшує довіру
до коду
Тести підтверджують, що код
працює правильно.
11
Приклад написання тесту
Цей код - тест до реалізації коду (в даному випадку
для методу fullName()).
Приклад реалізації
функціональності, яку ми
тестуємо
Цей код — це реалізація того, що буде перевірятися
за допомогою тесту testUserFullName(), який
підтвердить правильність роботи методу
fullName().
12
Рефакторинг коду
Виявлення проблем у
коді
Ідентифікація ділянок з
дублюванням, складною
логікою та неефективними
конструкціями.
Визначення частин коду, які
потребують покращення для
підвищення продуктивності або
читабельності.
Зміни в структурі коду
Змінюйте структуру функцій або
методів без втрати їх
функціональності, щоб зробити
код більш чистим і зрозумілим.
Тестування після
рефакторингу
Після кожної зміни важливо
перевірити, чи не вплинула вона на
правильність виконання програми.
Потрібно ретельно протестувати
всі частини коду.
13
До рефакторингу:
Проблеми:
Логіка виконання в одному блоці: всі операції
(перевірка знижки, обчислення нової ціни,
виведення помилки) виконуються в одній функції,
що ускладнює тестування та розширення
функціональності.
Функція виконує більше ніж одну операцію:
функція одночасно перевіряє умови та обчислює
результат. Це порушує принципи розділення
відповідальностей SRP(Single Responsibility Principle)
та ускладнює підтримку коду.
Після рефакторингу:
Покращення:
Принцип SRP: кожна функція виконує лише одну
задачу, що дозволяє легше розширювати
функціональність.
Простота тестування: Тепер можна окремо
тестувати кожну функцію, що дозволяє зменшити
кількість помилок та спрощує підтримку коду.
14
Важливість написання коду за
правилами
Зрозумілість коду
Чіткий код легше читати, що
полегшує внесення змін і усунення
помилок.
Код із зрозумілими назвами
функцій та змінних мінімізує
кількість питань під час роботи над
проектом.
Ефективна співпраця
Узгодженість стилю коду в команді
розробників забезпечує легку
співпрацю та підвищує
продуктивність всієї команди.
Довгострокова
підтримка
Якісно написаний код легше
підтримувати та модифікувати в
майбутньому, що зменшує витрати
на розробку та оновлення проекту.
15
Порівняння поганого і гарного коду
Приклад поганого коду: Приклад гарного коду:
16
Проблеми поганого коду
Погані назви методів та змінних: назви методів
та змінних не є інформативними та не
відповідають прийнятим стандартам.
1.
Наприклад, змінну em краще було б назвати
email, а метод fn() назвати getFullName().
Відсутність відступів та структурованості:2.
Код виглядає безладно і складно для
читання через відсутність правильних
відступів.
Немає чіткої логіки та інкапсуляції:3.
Всі операції (додавання, видалення
користувачів) та методи працюють в одному
класі без чіткого поділу обов'язків.
Використання складних конструкцій без
перевірки:
4.
В методі remove() видалення користувача
відбувається без належної перевірки, що
може призвести до помилок.
Відсутність коментарів. Код складний для
розуміння без пояснень.
5.
Переваги гарного коду
Чіткі назви методів та змінних: всі методи
мають зрозумілі назви: addUser(),
removeUser(by:), що чітко відображають їхню
функціональність.
1.
Правильні відступи: код правильно
відформатований з коректними відступами, що
полегшує читання та розуміння структури.
2.
Чітке розділення обов'язків: клас User
відповідає лише за дані користувача, а
UserManager керує списком користувачів, що
відповідає принципу єдиної відповідальності.
3.
Простота та перевірка валідності: операції з
користувачами чітко визначені, а функції мають
зрозумілі перевірки та логіку.
4.
17
Висновки
1 Чистий код
Важливий для зручності роботи з програмами, їх
підтримки та довгострокової модифікації.
Правильно структурований код значно знижує
витрати на обслуговування проекту.
2 Стандарти та правила
Полегшують читабельність, зменшують кількість
помилок та підвищують продуктивність
команди. Дотримання єдиного стилю кодування
забезпечує ефективну співпрацю в команді.
3 Дотримання парадигм
Забезпечує ефективну організацію та підтримку
проекту через використання перевірених
практик об'єктно-орієнтованого програмування
та принципів SOLID.
4 Рефакторинг
Покращує читабельність та продуктивність коду
без зміни його функціональності, а також
спрощує впровадження нових функцій та
виправлення помилок у майбутньому.
18
Список використаних джерел
Apple Inc. Swift Style Guide - swift.org/documentation
Ray Wenderlich Swift Style Guide - GitHub Repository
Stack Overflow - Swift Best Practices Community
