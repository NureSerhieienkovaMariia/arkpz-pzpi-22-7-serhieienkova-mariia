МІНЕСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмна інженерія»
ЗВІТ
до практичного заняття №2 з
дисципліни
«Аналіз та рефакторинг коду»
На тему: «Методи рефакторингу коду программного забезпечення»
Виконала:
Ст. гр. ПЗПІ-22-7
Сергєєнкова Марія Сергіївна
Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
Харків 2024

1 МЕТА
Навчитися ідентифікувати проблеми в коді та використовувати відповідні
методи рефакторингу для покращення його якості.

2 ЗАВДАННЯ
Cтудент повинен обрати три методи рефакторингу коду із книги Мартіна
Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади
свого особистого коду (з курсових, лабораторних або інших проєктів), який
потребує покращення, та продемонструвати застосування обраних методів.

3 ХІД РОБОТИ
Вся робота була виконана та показана на слайдах презентації. Вона містить
три обрані методи(“Replace Type Code with State/Strategy”, “Pull Up
Constructor Body”, “Separate Query from Modifier”), приклади рефакторингу
коду та висновки, які наведені у Додатку А.

ВИСНОВКИ
Ми вивчили основи рефакторингу коду та його значення для покращення
якості програмного забезпечення. Після застосування кожного методу ми
побачили значне покращення структури та читабельності коду. Ці зміни також
зробили код легшим для підтримки та розширення.
Посилання на відео-презентацію https://youtu.be/2KeTDc3Qr_s?feature=shared
Посилання на GitHub репозиторій з кодом 

ДОДАТОК А
Презентація на тему «Методи рефакторингу коду програмного
забезпечення».

Методи рефакторингу
коду програмного
забезпечення
Виконала: Сергєєнкова Марія
Ст. групи ПЗПІ-22-7
03.12.2024
Вступ
Рефакторинг — це процес покращення коду без зміни його зовнішньої
функціональності.
Мета рефакторингу полягає в тому, щоб зробити код чистішим, легшим для
підтримки, оптимізованим та менш схильним до помилок.
Розглянемо три методи рефакторингу:
Replace Type Code with State/Strategy
(Заміна коду типу на стратегію)
Pull Up Constructor Body
(Перенесення конструктора в базовий клас)
Separate Query from Modifier
(Розділення запиту та модифікації)
2
Метод «Replace Type Code with
State/Strategy»
1
Проблема
Умовні конструкції, що залежать від типу об'єкта, ускладнюють підтримку та розширення коду.
2
Рішення
Заміна умов на стратегії. Кожен тип реалізує свою стратегію, що дозволяє зменшити складність і
зробити код більш гнучким.
3
Чому саме цей метод?
Дозволяє замінити умовну логіку на класи-стратегії, які реалізують потрібну поведінку. Це розділяє
відповідальність між типами, усуваючи залежність від умов.
3
До рефакторингу: Після рефакторингу:
4
Переваги методу «Replace Type Code
with State/Strategy»
Гнучкість
Легко додавати нові стратегії без
змін у існуючому коді.
Зрозумілість
Логіка кожного типу зберігається в
окремому класі.
Надійність
Уникнення помилок, пов'язаних із
рядковими значеннями типів.
5
Метод «Replace Error Code with
Exception»
1
Проблема
Використання кодів помилок ускладнює читабельність коду і змішує основну логіку з обробкою
помилок.
2
Рішення
Заміна кодів помилок на винятки, що дозволяє чітко відокремити логіку обробки помилок від
бізнес-логіки.
3
Чому саме цей метод?
Винятки забезпечують більш ясний, гнучкий і надійний підхід до управління помилками, порівняно
з кодами помилок.
6
До рефакторингу: Після рефакторингу:
7
Переваги методу «Replace Error Code
with Exception»
Ясність
Винятки роблять код більш
читабельним і зрозумілим.
Гнучкість
Логіка обробки помилок може бути
винесена в окремий блок, що
спрощує масштабування.
Надійність
Використання винятків знижують
ризик некоректної роботи
програми.
8
Метод «Separate Query from Modifier»
1
Проблема
Методи, що змінюють стан об'єкта та повертають значення, ускладнюють розуміння коду.
2
Рішення
Розділити методи, що запитують дані, та методи, що змінюють стан, для підвищення читабельності
та легкості тестування.
3
Чому саме цей метод?
Розділяє дії, забезпечуючи, щоб кожен метод виконував лише одну операцію: або зміну стану, або
повернення значення.
9
До рефакторингу: Після рефакторингу:
10
Переваги методу «Separate Query
from Modifier»
Гнучкість
Легко оновлювати код, оскільки
методи виконують тільки одну
задачу.
Ясність
Чітке розмежування між методами,
що змінюють стан, та тими, що
лише запитують дані.
Безпека
Знижує ймовірність помилок,
оскільки модифікація та запити не
змішуються в одному методі.
11
Висновки
Важливість
рефакторингу
Рефакторинг необхідний для
підтримки якості коду на
високому рівні, збільшення
його стабільності та зниження
складності підтримки.
Коли і як
застосовувати
Рефакторинг потрібен, коли
код стає занадто складним,
має багато дублювання або
важко підтримується.
Метод рефакторингу слід
вибирати залежно від
конкретних проблем коду.
Переваги
рефакторингу
Рефакторинг допомагає
значно покращити якість
програмного забезпечення,
робить його більш гнучким до
змін і дозволяє знизити
ймовірність виникнення
помилок.
12
Список використаних джерел
Прийоми рефакторингу Refactoring.Guru
Refactoring: Improving the Design of Existing Code / J. Brant et al.
Code refactoring : JetBrains Documentation

